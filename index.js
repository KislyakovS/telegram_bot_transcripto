const TelegramBot = require("node-telegram-bot-api");
const VoiceParser = require("./modules/VoiceParser.js");
const { getWavStreamFromUrl } = require("./modules/getWavStreamFromUrl.js");

require("dotenv").config();

const voiceParser = new VoiceParser(process.env.VOSK_MODEL_PATH);
const telegram = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
  polling: true,
});

const isEmptyString = (str) =>
  str === null || str === undefined || str.trim() === "";

telegram.on("message", async (message) => {
  const chatID = message.chat.id;

  telegram.sendMessage(chatID, "üîä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å...");

  try {
    const file = message.voice || message.video_note;

    if (!file || !file.file_id) {
      telegram.sendMessage(chatID, "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ.");

      return;
    }

    const fileLink = await telegram.getFileLink(file.file_id);
    const { stream, remove } = await getWavStreamFromUrl(fileLink);
    const voiceText = await voiceParser.parse(stream);

    telegram.sendMessage(
      chatID,
      `üìù –¢–µ–∫—Å—Ç: ${isEmptyString(voiceText) ? "[–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞]" : voiceText}`,
    );
    remove();
  } catch (error) {
    console.error(error);
    telegram.sendMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");
  }
});
